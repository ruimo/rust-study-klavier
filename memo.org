-*- truncate-lines: nil -*-

Klavierをrustで実装してみる。

* オブジェクト・モデル

objectModel.asta

MusicSymbol:
楽譜記号の基底クラス

Widget:
GUI上の部品基底クラス

Note:
音符

Tempo:
テンポ指定

Note/Tempo以外にも、小節線、MIDIコントロールチェンジなどがあるが、NoteとTempoがうまく設計できれば、あとはバリエーションを増やしていくだけで良いので、この2つに絞る。

** 要件

複数のオブジェクトを統一的に扱えること。

オブジェクトの数は数万から数10万。

オブジェクトは、immutable。前のプログラムでは、オブジェクトをmutableにした場合とimmutableにした場合の両方を実験した。mutableにすると、

- 状態管理が面倒
- オブザーバ登録のためのオーバーヘッドが多い(基本、全てのオブジェクトでオブザーバは共通なのに、個々のオブジェクトにオブザーバ登録を行うのは無駄)
- オブザーバ呼び出しのオーバーヘッドが大きい。オブジェクトの複数のプロパティを変更すると、その度にイベントが発生。オブジェクト数が万を超えると苦しい

immutableとすることで、オブジェクトを変更したければ、新たなオブジェクトを生成して古いオブジェクトを削除するしかなくなる。このためオブジェクトのレポジトリへの追加、削除にフックを入れてやれば、捕捉が可能。

楽譜なので、縦方向(音域)は限られるが、横方向は曲の長さ次第で非常に長いこともあるが、四分音符を240分割した単位をtickとすると、tickは32bit整数で十分。

現在の画面に、どのオブジェクトを表示しなければいけないか、特定のオブジェクトが追加、削除された時に現在の画面を更新しなければならないか、十分に高速に判定できなければならない。このため、オブジェクトを格納するオブジェクトレポジトリの他に、高速計算用のキャッシュレポジトリを持って、そこにもオブジェクトを登録する必要がある。キャッシュレポジトリは終了tick順や、長さ順など様々なソート順でオブジェクトを格納することで、判定の高速化に寄与する。

Undoできること、オブジェクトレポジトリの更新は、Commandパターンを用いる。

** オブジェクトとレポジトリ

通常なら、1つのレポジトリにNoteもTempoも放り込む設計をまず考えるが、これは良く考ええると無駄。例えば描画しようとすると、レポジトリから混ぜこぜになったオブジェクトを取り出し、NoteだったらNote用の描画、TempoだったらTempo用の描画と分岐することになる。混ぜるから分岐が必要になる。なら最初からNote用レポジトリ、Tempo用レポジトリを分けた方が合理的だ。

** NoteとTempo

それぞれをstructで定義してみる(model00)。

struct Note {
    start_tick: u32,
    velocity: u8
}

struct Tempo {
    start_tick: u32,
    value: u16
}

trait HasStartTick {
    fn start_tick(&self) -> u32;
}

impl HasStartTick for Note {
    fn start_tick(&self) -> u32 {
        return self.start_tick;
    }
}

impl HasStartTick for Tempo {
    fn start_tick(&self) -> u32 {
        return self.start_tick;
    }
}

fn main() {
}

rustには実装の継承が無い。またtraitは後付けできるという特徴がある。つまりNoteとTempoは全く別の型なのだが、HasStartTickというtraitを(NoteとTempoの定義に一切、手を加えずに)付与できる。
start_tick回りには若干のコード重複があるが、大したものではないので我慢する。実際のアプリケーションでも、共通のプロパティはstart_tickのみなのだ。共通プロパティが多ければ問題になるだろうが、そういう場合の対処はWidget情報を付与の方で考えてみる。

音符の高さを表わすために、ド-シの音程情報と、シャープ、フラット情報を持たせてみる(model06)。

mod solfa {
    pub struct Solfa {
        pitch_offset: u8,
        score_offset: u8
    }

    impl Solfa {
        pub fn pitch_offset(&self) -> u8 {
            return self.pitch_offset;
        }
        pub fn score_offset(&self) -> u8 {
            return self.score_offset;
        }
    }

    pub const C: Solfa = Solfa {pitch_offset: 0, score_offset: 0};
    pub const D: Solfa = Solfa {pitch_offset: 1, score_offset: 2};
    pub const E: Solfa = Solfa {pitch_offset: 2, score_offset: 4};
    pub const F: Solfa = Solfa {pitch_offset: 3, score_offset: 5};
    pub const G: Solfa = Solfa {pitch_offset: 4, score_offset: 7};
    pub const A: Solfa = Solfa {pitch_offset: 5, score_offset: 9};
    pub const B: Solfa = Solfa {pitch_offset: 6, score_offset: 11};
    pub const OCTAVE: u8 = 7;
}

mod sharp_flat {
    pub struct SharpFlat {
        offset: i8
    }
    impl SharpFlat {
        pub fn offset(&self) -> i8 {
            return self.offset;
        }
    }

    pub const SHARP: SharpFlat = SharpFlat {offset: 1};
    pub const DOUBLE_SHARP: SharpFlat = SharpFlat {offset: 2};
    pub const NATURAL: SharpFlat = SharpFlat {offset: 0};
    pub const FLAT: SharpFlat = SharpFlat {offset: -1};
    pub const DOUBLE_FLAT: SharpFlat = SharpFlat {offset: -2};
}

struct WidgetProps {
    is_selected: bool,
    layer_no: u8
}

trait Widget {
    fn is_selected(&self) -> bool;
    fn layer_no(&self) -> u8;
}

impl Widget for WidgetProps {
    fn is_selected(&self) -> bool {
        return self.is_selected;
    }
    fn layer_no(&self) -> u8 {
        return self.layer_no;
    }
}

struct Note {
    start_tick: u32,
    velocity: u8,
    solfa: solfa::Solfa,
    sharp_flat: sharp_flat::SharpFlat,
    widget: WidgetProps
}

struct Tempo {
    start_tick: u32,
    value: u16,
    widget: WidgetProps
}

trait HasStartTick {
    fn start_tick(&self) -> u32;
}

impl HasStartTick for Note {
    fn start_tick(&self) -> u32 {
        return self.start_tick;
    }
}

impl HasStartTick for Tempo {
    fn start_tick(&self) -> u32 {
        return self.start_tick;
    }
}

trait HasWidget {
    fn widget(&self) -> &Widget;
}

impl HasWidget for Note {
    fn widget(&self) -> &Widget {
        return &self.widget;
    }
}

impl HasWidget for Tempo {
    fn widget(&self) -> &Widget {
        return &self.widget;
    }
}

impl<T> Widget for T where T: HasWidget {
    fn is_selected(&self) -> bool {
        return self.widget().is_selected()
    }
    fn layer_no(&self) -> u8 {
        return self.widget().layer_no()
    }
}

この定義だと、Solfaという型は外部公開されるけど、pitch_offsetなどのメンバは公開されない。

mod solfa {
    pub struct Solfa {
        pitch_offset: u8,
        score_offset: u8
    }
}

このため、solfaモジュールの外で、solfa::Solfa { pitch_offset: 100, score_offset: 200 }などとインスタンスを生成できない(pitch_offsetというメンバは公開されていない)。ただしSolfaという型は公開されているので、以下のようにNoteのメンバに持つことができる。

struct Note {
    start_tick: u32,
    velocity: u8,
    solfa: solfa::Solfa,
    sharp_flat: sharp_flat::SharpFlat,
    widget: WidgetProps
}

ただ、このままだと、Noteのsolfaから、pitch_offsetが取り出せないので、ゲッタを追加している。

    impl Solfa {
        pub fn pitch_offset(&self) -> u8 {
            return self.pitch_offset;
        }
        pub fn score_offset(&self) -> u8 {
            return self.score_offset;
        }
    }

** Widget

Widget情報の付与も同様に対処できなくもない(model01)。

struct Note {
    start_tick: u32,
    velocity: u8,
        
    is_selected: bool,
    layer_no: u8
}

struct Tempo {
    start_tick: u32,
    value: u16,

    is_selected: bool,
    layer_no: u8
}

trait HasStartTick {
    fn start_tick(&self) -> u32;
}

impl HasStartTick for Note {
    fn start_tick(&self) -> u32 {
        return self.start_tick;
    }
}

impl HasStartTick for Tempo {
    fn start_tick(&self) -> u32 {
        return self.start_tick;
    }
}

trait Widget {
    fn is_selected(&self) -> bool;
    fn layer_no(&self) -> u8;
}

impl Widget for Note {
    fn is_selected(&self) -> bool {
        return self.is_selected;
    }
    fn layer_no(&self) -> u8 {
        return self.layer_no;
    }
}

impl Widget for Tempo {
    fn is_selected(&self) -> bool {
        return self.is_selected;
    }
    fn layer_no(&self) -> u8 {
        return self.layer_no;
    }
}

fn main() {
}

しかしWidgetは本物のアプリケーションでは、もう少しプロパティが多いので、今度はコード重複をなんとかしたい。もちろん実装の継承は無いので、コンポジションになる(model02)。

struct WidgetProps {
    is_selected: bool,
    layer_no: u8
}

trait Widget {
    fn is_selected(&self) -> bool;
    fn layer_no(&self) -> u8;
}

struct Note {
    start_tick: u32,
    velocity: u8,
    widget: WidgetProps
}

struct Tempo {
    start_tick: u32,
    value: u16,
    widget: WidgetProps
}

trait HasStartTick {
    fn start_tick(&self) -> u32;
}

impl HasStartTick for Note {
    fn start_tick(&self) -> u32 {
        return self.start_tick;
    }
}

impl HasStartTick for Tempo {
    fn start_tick(&self) -> u32 {
        return self.start_tick;
    }
}

impl Widget for Note {
    fn is_selected(&self) -> bool {
        return self.widget.is_selected;
    }
    fn layer_no(&self) -> u8 {
        return self.widget.layer_no;
    }
}

impl Widget for Tempo {
    fn is_selected(&self) -> bool {
        return self.widget.is_selected;
    }
    fn layer_no(&self) -> u8 {
        return self.widget.layer_no;
    }
}

fn main() {
}

実装部分はWidgetPropsにまとまったが、impl Widget for Noteと、impl Widget for Tempoが重複している。なんとかできないか？
Widgetを持っているという性質をHasWidgetに抜き出してみる(model03)。

trait HasWidget {
    fn widget(&self) -> Widget;
}

impl HasWidget for Note {
    fn widget(&self) -> Widget {
        return self.widget;
    }
}

しかしエラー。

error[E0277]: the trait bound `Widget + 'static: std::marker::Sized` is not satisfied
  --> src/main.rs:53:25
   |
53 |     fn widget(&self) -> Widget {
   |                         ^^^^^^ trait `Widget + 'static: std::marker::Sized` not satisfied
   |
   = note: `Widget + 'static` does not have a constant size known at compile-time
   = note: the return type of a function must have a statically known size

Widgetはtraitなので、静的にサイズが確定できないので、戻り値にそのまま書けない。そこで参照にしてみる(model04)。

impl HasStartTick for Tempo {
    fn start_tick(&self) -> u32 {
        return self.start_tick;
    }
}

trait HasWidget {
    fn widget(&self) -> &Widget;
}

impl HasWidget for Note {
    fn widget(&self) -> &Widget {
        return &self.widget;
    }
}

impl HasWidget for Tempo {
    fn widget(&self) -> &Widget {
        return &self.widget;
    }
}

今度はコンパイルok。あとは、HasWidgetが実装されているオブジェクトであれば、自動的にWidgetが実装される仕掛けがあれば良い(model05)。

trait HasWidget {
    fn widget(&self) -> &Widget;
}

impl HasWidget for Note {
    fn widget(&self) -> &Widget {
        return &self.widget;
    }
}

impl HasWidget for Tempo {
    fn widget(&self) -> &Widget {
        return &self.widget;
    }
}

impl<T> Widget for T where T: HasWidget { // (1)
    fn is_selected(&self) -> bool {
        return self.widget().is_selected()
    }
    fn layer_no(&self) -> u8 {
        return self.widget().layer_no()
    }
}

(1) の書き方は、HasWidgetを実装している任意の型T全てに対してWidgetを実装する書き方で、これによってNoteやTempo個別にWidgetを実装しなくて良くなる。これでモデルは大体希望のものができたので、レポジトリを考える。

** Repo

楽譜の描画を考えてみる。以下のような特性がある。

1) 楽譜は縦方向は音域なので限られる
2) 横方向は曲の長さ次第なので、いくらでも長くなる
3) 音符の数は曲次第だが長い曲であれば、数万から数10万となる
4) 1つの音符の長さは限りがある(全音符が一番長い)

3) の特性があるので、ある程度効率的に描画しないと、パフォーマンスが悪すぎて使い物にならなくなる。通常は楽譜の中の一部分をウィンドウ内に表示することになるので、そのウィンドウ内に描画すべきオブジェクトを効率的に探し出す必要がある。ウィンドウ内に表示すべきかどうかは、一見すると開始か終了が、表示ウィンドウ内にあるかどうかで判定できそうである。

    |   ウィンドウ   |
<---|---> 音符       |
    |           <----|--> 音符
    |   <----> 音符  |

これなら、音符を開始位置順にソートしたもの、終了位置順にソートしたものを用意しておけば効率良く見つけられるだろう。しかし、これは1つのケースを見逃している。

    |   ウィンドウ   |
<---|----------------|---> 音符
    |                |

開始点がウィンドウ左端よりも小さく、かつ終了点がウィンドウ右端よりも大きい音符を効率良く探し出すアルゴリズムを考えるのは難しいだろう(少なくとも私は思いつかない)。幸い、4)の特性があるので、以下のように考えれば良い。


              |   ウィンドウ   |
<-------------|>               | ぎりぎりウィンドウの左にかかる音符
  音符最大長  |                |
              |               <|-------------> ぎりぎりウィンドウの右にかかる音符

|<------------------------------------------->|
開始点、終了点がこの範囲に入る音符を対象とすれば良い。

結局、開始点でソートしたレポジトリと、終了点でソートしたレポジトリを持てば良い。縦方向については広さが限られているので、対象を絞ったりせずに全てを描画してしまえば良い。

ソートシタ
